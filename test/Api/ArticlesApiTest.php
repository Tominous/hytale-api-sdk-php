<?php
/**
 * ArticlesApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hytale API
 *
 * Hytale Official API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.4
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use Swagger\Client\Api\ArticlesApi;
use \Swagger\Client\Configuration;
use \Swagger\Client\ApiException;
use Swagger\Client\Model\Article;
use \Swagger\Client\ObjectSerializer;

/**
 * ArticlesApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ArticlesApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for getArticleBySlug
     *
     * .
     *
     */
    public function testGetArticleBySlug()
    {
        $apiInstance = new ArticlesApi();
        $result = $apiInstance->getArticleBySlug('creating-creature-sounds-for-hytale');
        $this->assertInstanceOf(Article::class, $result);
        $this->assertEquals('Creating creature sounds for Hytale', $result->getTitle());
    }

    /**
     * Test case for getArticles
     *
     * .
     *
     */
    public function testGetArticles()
    {
        $apiInstance = new ArticlesApi();
        $result = $apiInstance->getArticles();
        $this->assertInternalType('array',  $result);
        $this->assertGreaterThanOrEqual(20, \count($result));
        $this->assertInstanceOf(Article::class, current($result));
    }

    /**
     * Test case for getArticlesOfMonthAndYear
     *
     * .
     *
     */
    public function testGetArticlesOfMonthAndYear()
    {
        $apiInstance = new ArticlesApi();
        $result = $apiInstance->getArticlesOfMonthAndYear(2019, 01);
        $this->assertInternalType('array',  $result);
        $this->assertCount(4, $result);
        $this->assertInstanceOf(Article::class, current($result));
    }
}
